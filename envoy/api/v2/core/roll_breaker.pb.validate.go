// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/api/v2/core/roll_breaker.proto

package envoy_api_v2_core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _roll_breaker_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RollBreakers with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RollBreakers) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWindowInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakersValidationError{
				field:  "WindowInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRollInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakersValidationError{
				field:  "RollInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCheckInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakersValidationError{
				field:  "CheckInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBreakPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakersValidationError{
				field:  "BreakPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakersValidationError{
				field:  "Threshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RollBreakersValidationError is the validation error returned by
// RollBreakers.Validate if the designated constraints aren't met.
type RollBreakersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollBreakersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollBreakersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollBreakersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollBreakersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollBreakersValidationError) ErrorName() string { return "RollBreakersValidationError" }

// Error satisfies the builtin error interface
func (e RollBreakersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollBreakers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollBreakersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollBreakersValidationError{}

// Validate checks the field values on RollBreakers_BreakPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RollBreakers_BreakPolicy) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEffectRequests()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_BreakPolicyValidationError{
				field:  "EffectRequests",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAllowRetrySelect()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_BreakPolicyValidationError{
				field:  "AllowRetrySelect",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActionType

	if v, ok := interface{}(m.GetActionCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_BreakPolicyValidationError{
				field:  "ActionCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActionHeaders

	if v, ok := interface{}(m.GetActionBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_BreakPolicyValidationError{
				field:  "ActionBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBreakInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_BreakPolicyValidationError{
				field:  "BreakInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RollBreakers_BreakPolicyValidationError is the validation error returned by
// RollBreakers_BreakPolicy.Validate if the designated constraints aren't met.
type RollBreakers_BreakPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollBreakers_BreakPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollBreakers_BreakPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollBreakers_BreakPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollBreakers_BreakPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollBreakers_BreakPolicyValidationError) ErrorName() string {
	return "RollBreakers_BreakPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e RollBreakers_BreakPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollBreakers_BreakPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollBreakers_BreakPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollBreakers_BreakPolicyValidationError{}

// Validate checks the field values on RollBreakers_IntThreshold with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RollBreakers_IntThreshold) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLimitValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_IntThresholdValidationError{
				field:  "LimitValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBreakPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_IntThresholdValidationError{
				field:  "BreakPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RollBreakers_IntThresholdValidationError is the validation error returned by
// RollBreakers_IntThreshold.Validate if the designated constraints aren't met.
type RollBreakers_IntThresholdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollBreakers_IntThresholdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollBreakers_IntThresholdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollBreakers_IntThresholdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollBreakers_IntThresholdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollBreakers_IntThresholdValidationError) ErrorName() string {
	return "RollBreakers_IntThresholdValidationError"
}

// Error satisfies the builtin error interface
func (e RollBreakers_IntThresholdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollBreakers_IntThreshold.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollBreakers_IntThresholdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollBreakers_IntThresholdValidationError{}

// Validate checks the field values on RollBreakers_DurationThreshold with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RollBreakers_DurationThreshold) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLimitValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_DurationThresholdValidationError{
				field:  "LimitValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBreakPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_DurationThresholdValidationError{
				field:  "BreakPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RollBreakers_DurationThresholdValidationError is the validation error
// returned by RollBreakers_DurationThreshold.Validate if the designated
// constraints aren't met.
type RollBreakers_DurationThresholdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollBreakers_DurationThresholdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollBreakers_DurationThresholdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollBreakers_DurationThresholdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollBreakers_DurationThresholdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollBreakers_DurationThresholdValidationError) ErrorName() string {
	return "RollBreakers_DurationThresholdValidationError"
}

// Error satisfies the builtin error interface
func (e RollBreakers_DurationThresholdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollBreakers_DurationThreshold.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollBreakers_DurationThresholdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollBreakers_DurationThresholdValidationError{}

// Validate checks the field values on RollBreakers_Threshold with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RollBreakers_Threshold) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequestNum()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_ThresholdValidationError{
				field:  "RequestNum",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAvgResponseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_ThresholdValidationError{
				field:  "AvgResponseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFailureRate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollBreakers_ThresholdValidationError{
				field:  "FailureRate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RollBreakers_ThresholdValidationError is the validation error returned by
// RollBreakers_Threshold.Validate if the designated constraints aren't met.
type RollBreakers_ThresholdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollBreakers_ThresholdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollBreakers_ThresholdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollBreakers_ThresholdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollBreakers_ThresholdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollBreakers_ThresholdValidationError) ErrorName() string {
	return "RollBreakers_ThresholdValidationError"
}

// Error satisfies the builtin error interface
func (e RollBreakers_ThresholdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollBreakers_Threshold.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollBreakers_ThresholdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollBreakers_ThresholdValidationError{}
